#crear el entorno virtual (trabajando en visual estudio en una pc windows, desde la terminal)
python -m venv venv

#verificacmos el directorio
dir 

#al visualizar nuestro entorno virtual ingresamos
cd venv

#ingresans en a carpeta Scripts
cd Scripts

#activamos el entorno
.\activate.bat

#instalamos Django y actualizar
pip install Django
pip install --upgrade django

#verificamos la version de Django
 python -m django --version (en mi caso es la(5.1.2))

#volvemos a la carpeta raiz
cd ..
cd ..(Ejecutamos dos veces)

#Creamos el proyecto
django-admin startproject CDOC

#ingresamos dentro del proyecto creado
cd .\CDOC\

#ejecutar el servidor
python manage.py runserver

#el proyecto ya esta creado ahora lo bajamos de vuelta pesionando Control + C

#crear una base de datos en postgres llamada CDOC



#creamos una app, una aplicacion
python manage.py startapp app

#anhadir la aplicacion en setting que esta dentro e la carpeta CDOC
# agregamos   'app',  en la linea 40 aproximadamente, dentro e INSTALLED_APPS = [ ...], guardamos

#verificamos la lista de nuestro entorno
pip list

# instalar en la terminal 
pip install psycopg2

#ir al archivo settings, desde la interfaz grafica y cambiar la configuracion de la base de datos,
# la misma se encuentra en la linea 96, colocar el usuario y contrasenha de tu postgres y el puerto
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "CDOC",
        "USER": "postgres",
        "PASSWORD": "postgres",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}


#ejecutar el servidor (no deberia dar ningun error)
python manage.py runserver

#lo bajamos de vuelta pesionando Control + C

#ejecutamos el siguiente script en la base de datos (no es lo ideal guardar el archivo en la base de datos pero lo dejaremos para otra version)
CREATE TABLE archivos (
    id SERIAL PRIMARY KEY,
    nombre_archivo VARCHAR(255) NOT NULL,
    archivo_c BYTEA,
    archivo_html BYTEA
);

# creamos los modelos desde la base de datos
python manage.py inspectdb > app/models.py

#ejecutar el servidor (no deberia dar ningun error)
python manage.py runserver

#si da el error "ValueError: source code string cannot contain null bytes", abrir el rchivo models con un block de notas y guardar con la configuracoon UTF-8

#lo bajamos de vuelta pesionando Control + C

#ejecutamos las migraciones
python manage.py makemigrations
python manage.py migrate --fake-initial

#ejecutar el servidor 
python manage.py runserver

#lo bajamos de vuelta pesionando Control + C

#ejecutamos en la terminal
python manage.py createsuperuser

#creamos el super usuario
python manage.py createsuperuser

#vamos a http://127.0.0.1:8000/admin ingresamos el usuario que acabamos de crear

#en el archivo admin.py de app agregamos
    from . import models

    #clases
    class EstadoArchivos(admin.ModelAdmin):
        list_display = ["id", "nombre_archivo", "archivo_c", "archivo_html"]
        list_filter = ["id", "nombre_archivo", "archivo_c", "archivo_html"]
        list_editable = ["nombre_archivo"]
        list_fields = ["nombre_archivo", "archivo_c"]


    # Register your models here.
    admin.site.register(models.Archivos,EstadoArchivos)

#modificamos en el models. py
    file_c = models.FileField(upload_to='uploads/', blank=True, null=True)
    file_html = models.FileField(upload_to='uploads/', blank=True, null=True)

#ejecutamos las migraciones
python manage.py makemigrations
python manage.py migrate 


#ejecutar el servidor 
python manage.py runserver



